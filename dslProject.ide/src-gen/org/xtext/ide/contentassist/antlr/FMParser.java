/*
 * generated by Xtext 2.12.0
 */
package org.xtext.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.ide.contentassist.antlr.internal.InternalFMParser;
import org.xtext.services.FMGrammarAccess;

public class FMParser extends AbstractContentAssistParser {

	@Inject
	private FMGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalFMParser createParser() {
		InternalFMParser result = new InternalFMParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getChildAccess().getAlternatives(), "rule__Child__Alternatives");
					put(grammarAccess.getFormulaAccess().getAlternatives(), "rule__Formula__Alternatives");
					put(grammarAccess.getFeatureModelAccess().getGroup(), "rule__FeatureModel__Group__0");
					put(grammarAccess.getFeatureDiagramAccess().getGroup(), "rule__FeatureDiagram__Group__0");
					put(grammarAccess.getLeafAccess().getGroup(), "rule__Leaf__Group__0");
					put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
					put(grammarAccess.getConstraintsAccess().getGroup(), "rule__Constraints__Group__0");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getRuleElementAccess().getGroup(), "rule__RuleElement__Group__0");
					put(grammarAccess.getVarAccess().getGroup(), "rule__Var__Group__0");
					put(grammarAccess.getFeatureModelAccess().getDiagramAssignment_1(), "rule__FeatureModel__DiagramAssignment_1");
					put(grammarAccess.getFeatureModelAccess().getConstraintsAssignment_2(), "rule__FeatureModel__ConstraintsAssignment_2");
					put(grammarAccess.getFeatureDiagramAccess().getRootAssignment_1(), "rule__FeatureDiagram__RootAssignment_1");
					put(grammarAccess.getLeafAccess().getMandatoryAssignment_1(), "rule__Leaf__MandatoryAssignment_1");
					put(grammarAccess.getLeafAccess().getNameAssignment_4(), "rule__Leaf__NameAssignment_4");
					put(grammarAccess.getNodeAccess().getOpen_relationAssignment_1(), "rule__Node__Open_relationAssignment_1");
					put(grammarAccess.getNodeAccess().getMandatoryAssignment_2(), "rule__Node__MandatoryAssignment_2");
					put(grammarAccess.getNodeAccess().getNameAssignment_5(), "rule__Node__NameAssignment_5");
					put(grammarAccess.getNodeAccess().getChildrenAssignment_8(), "rule__Node__ChildrenAssignment_8");
					put(grammarAccess.getNodeAccess().getClose_relationAssignment_10(), "rule__Node__Close_relationAssignment_10");
					put(grammarAccess.getConstraintsAccess().getRulesAssignment_1(), "rule__Constraints__RulesAssignment_1");
					put(grammarAccess.getRuleAccess().getElementsAssignment_1(), "rule__Rule__ElementsAssignment_1");
					put(grammarAccess.getRuleElementAccess().getOpen_operatorAssignment_1(), "rule__RuleElement__Open_operatorAssignment_1");
					put(grammarAccess.getRuleElementAccess().getLeft_sideAssignment_3(), "rule__RuleElement__Left_sideAssignment_3");
					put(grammarAccess.getRuleElementAccess().getRight_sideAssignment_4(), "rule__RuleElement__Right_sideAssignment_4");
					put(grammarAccess.getRuleElementAccess().getClose_operatorAssignment_6(), "rule__RuleElement__Close_operatorAssignment_6");
					put(grammarAccess.getVarAccess().getNotAssignment_1(), "rule__Var__NotAssignment_1");
					put(grammarAccess.getVarAccess().getNameAssignment_4(), "rule__Var__NameAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public FMGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(FMGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
