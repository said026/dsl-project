/**
 * generated by Xtext 2.12.0
 */
package org.xtext.fM.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.fM.FMPackage;
import org.xtext.fM.RuleElement;
import org.xtext.fM.Var;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Rule Element</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.fM.impl.RuleElementImpl#getOpen_operator <em>Open operator</em>}</li>
 *   <li>{@link org.xtext.fM.impl.RuleElementImpl#getLeft_side <em>Left side</em>}</li>
 *   <li>{@link org.xtext.fM.impl.RuleElementImpl#getRight_side <em>Right side</em>}</li>
 *   <li>{@link org.xtext.fM.impl.RuleElementImpl#getClose_operator <em>Close operator</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RuleElementImpl extends FormulaImpl implements RuleElement
{
  /**
   * The default value of the '{@link #getOpen_operator() <em>Open operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOpen_operator()
   * @generated
   * @ordered
   */
  protected static final String OPEN_OPERATOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOpen_operator() <em>Open operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOpen_operator()
   * @generated
   * @ordered
   */
  protected String open_operator = OPEN_OPERATOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getLeft_side() <em>Left side</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft_side()
   * @generated
   * @ordered
   */
  protected Var left_side;

  /**
   * The cached value of the '{@link #getRight_side() <em>Right side</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRight_side()
   * @generated
   * @ordered
   */
  protected Var right_side;

  /**
   * The default value of the '{@link #getClose_operator() <em>Close operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClose_operator()
   * @generated
   * @ordered
   */
  protected static final String CLOSE_OPERATOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getClose_operator() <em>Close operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClose_operator()
   * @generated
   * @ordered
   */
  protected String close_operator = CLOSE_OPERATOR_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RuleElementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FMPackage.Literals.RULE_ELEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getOpen_operator()
  {
    return open_operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOpen_operator(String newOpen_operator)
  {
    String oldOpen_operator = open_operator;
    open_operator = newOpen_operator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FMPackage.RULE_ELEMENT__OPEN_OPERATOR, oldOpen_operator, open_operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Var getLeft_side()
  {
    return left_side;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeft_side(Var newLeft_side, NotificationChain msgs)
  {
    Var oldLeft_side = left_side;
    left_side = newLeft_side;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FMPackage.RULE_ELEMENT__LEFT_SIDE, oldLeft_side, newLeft_side);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLeft_side(Var newLeft_side)
  {
    if (newLeft_side != left_side)
    {
      NotificationChain msgs = null;
      if (left_side != null)
        msgs = ((InternalEObject)left_side).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FMPackage.RULE_ELEMENT__LEFT_SIDE, null, msgs);
      if (newLeft_side != null)
        msgs = ((InternalEObject)newLeft_side).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FMPackage.RULE_ELEMENT__LEFT_SIDE, null, msgs);
      msgs = basicSetLeft_side(newLeft_side, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FMPackage.RULE_ELEMENT__LEFT_SIDE, newLeft_side, newLeft_side));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Var getRight_side()
  {
    return right_side;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRight_side(Var newRight_side, NotificationChain msgs)
  {
    Var oldRight_side = right_side;
    right_side = newRight_side;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FMPackage.RULE_ELEMENT__RIGHT_SIDE, oldRight_side, newRight_side);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRight_side(Var newRight_side)
  {
    if (newRight_side != right_side)
    {
      NotificationChain msgs = null;
      if (right_side != null)
        msgs = ((InternalEObject)right_side).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FMPackage.RULE_ELEMENT__RIGHT_SIDE, null, msgs);
      if (newRight_side != null)
        msgs = ((InternalEObject)newRight_side).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FMPackage.RULE_ELEMENT__RIGHT_SIDE, null, msgs);
      msgs = basicSetRight_side(newRight_side, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FMPackage.RULE_ELEMENT__RIGHT_SIDE, newRight_side, newRight_side));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getClose_operator()
  {
    return close_operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setClose_operator(String newClose_operator)
  {
    String oldClose_operator = close_operator;
    close_operator = newClose_operator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FMPackage.RULE_ELEMENT__CLOSE_OPERATOR, oldClose_operator, close_operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FMPackage.RULE_ELEMENT__LEFT_SIDE:
        return basicSetLeft_side(null, msgs);
      case FMPackage.RULE_ELEMENT__RIGHT_SIDE:
        return basicSetRight_side(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FMPackage.RULE_ELEMENT__OPEN_OPERATOR:
        return getOpen_operator();
      case FMPackage.RULE_ELEMENT__LEFT_SIDE:
        return getLeft_side();
      case FMPackage.RULE_ELEMENT__RIGHT_SIDE:
        return getRight_side();
      case FMPackage.RULE_ELEMENT__CLOSE_OPERATOR:
        return getClose_operator();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FMPackage.RULE_ELEMENT__OPEN_OPERATOR:
        setOpen_operator((String)newValue);
        return;
      case FMPackage.RULE_ELEMENT__LEFT_SIDE:
        setLeft_side((Var)newValue);
        return;
      case FMPackage.RULE_ELEMENT__RIGHT_SIDE:
        setRight_side((Var)newValue);
        return;
      case FMPackage.RULE_ELEMENT__CLOSE_OPERATOR:
        setClose_operator((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FMPackage.RULE_ELEMENT__OPEN_OPERATOR:
        setOpen_operator(OPEN_OPERATOR_EDEFAULT);
        return;
      case FMPackage.RULE_ELEMENT__LEFT_SIDE:
        setLeft_side((Var)null);
        return;
      case FMPackage.RULE_ELEMENT__RIGHT_SIDE:
        setRight_side((Var)null);
        return;
      case FMPackage.RULE_ELEMENT__CLOSE_OPERATOR:
        setClose_operator(CLOSE_OPERATOR_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FMPackage.RULE_ELEMENT__OPEN_OPERATOR:
        return OPEN_OPERATOR_EDEFAULT == null ? open_operator != null : !OPEN_OPERATOR_EDEFAULT.equals(open_operator);
      case FMPackage.RULE_ELEMENT__LEFT_SIDE:
        return left_side != null;
      case FMPackage.RULE_ELEMENT__RIGHT_SIDE:
        return right_side != null;
      case FMPackage.RULE_ELEMENT__CLOSE_OPERATOR:
        return CLOSE_OPERATOR_EDEFAULT == null ? close_operator != null : !CLOSE_OPERATOR_EDEFAULT.equals(close_operator);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (open_operator: ");
    result.append(open_operator);
    result.append(", close_operator: ");
    result.append(close_operator);
    result.append(')');
    return result.toString();
  }

} //RuleElementImpl
