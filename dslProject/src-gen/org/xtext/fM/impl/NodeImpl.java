/**
 * generated by Xtext 2.12.0
 */
package org.xtext.fM.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.fM.Child;
import org.xtext.fM.FMPackage;
import org.xtext.fM.Node;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Node</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.fM.impl.NodeImpl#getOpen_relation <em>Open relation</em>}</li>
 *   <li>{@link org.xtext.fM.impl.NodeImpl#getChildren <em>Children</em>}</li>
 *   <li>{@link org.xtext.fM.impl.NodeImpl#getClose_relation <em>Close relation</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NodeImpl extends ChildImpl implements Node
{
  /**
   * The default value of the '{@link #getOpen_relation() <em>Open relation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOpen_relation()
   * @generated
   * @ordered
   */
  protected static final String OPEN_RELATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOpen_relation() <em>Open relation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOpen_relation()
   * @generated
   * @ordered
   */
  protected String open_relation = OPEN_RELATION_EDEFAULT;

  /**
   * The cached value of the '{@link #getChildren() <em>Children</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChildren()
   * @generated
   * @ordered
   */
  protected EList<Child> children;

  /**
   * The default value of the '{@link #getClose_relation() <em>Close relation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClose_relation()
   * @generated
   * @ordered
   */
  protected static final String CLOSE_RELATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getClose_relation() <em>Close relation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClose_relation()
   * @generated
   * @ordered
   */
  protected String close_relation = CLOSE_RELATION_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NodeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FMPackage.Literals.NODE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getOpen_relation()
  {
    return open_relation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOpen_relation(String newOpen_relation)
  {
    String oldOpen_relation = open_relation;
    open_relation = newOpen_relation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FMPackage.NODE__OPEN_RELATION, oldOpen_relation, open_relation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Child> getChildren()
  {
    if (children == null)
    {
      children = new EObjectContainmentEList<Child>(Child.class, this, FMPackage.NODE__CHILDREN);
    }
    return children;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getClose_relation()
  {
    return close_relation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setClose_relation(String newClose_relation)
  {
    String oldClose_relation = close_relation;
    close_relation = newClose_relation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FMPackage.NODE__CLOSE_RELATION, oldClose_relation, close_relation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FMPackage.NODE__CHILDREN:
        return ((InternalEList<?>)getChildren()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FMPackage.NODE__OPEN_RELATION:
        return getOpen_relation();
      case FMPackage.NODE__CHILDREN:
        return getChildren();
      case FMPackage.NODE__CLOSE_RELATION:
        return getClose_relation();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FMPackage.NODE__OPEN_RELATION:
        setOpen_relation((String)newValue);
        return;
      case FMPackage.NODE__CHILDREN:
        getChildren().clear();
        getChildren().addAll((Collection<? extends Child>)newValue);
        return;
      case FMPackage.NODE__CLOSE_RELATION:
        setClose_relation((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FMPackage.NODE__OPEN_RELATION:
        setOpen_relation(OPEN_RELATION_EDEFAULT);
        return;
      case FMPackage.NODE__CHILDREN:
        getChildren().clear();
        return;
      case FMPackage.NODE__CLOSE_RELATION:
        setClose_relation(CLOSE_RELATION_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FMPackage.NODE__OPEN_RELATION:
        return OPEN_RELATION_EDEFAULT == null ? open_relation != null : !OPEN_RELATION_EDEFAULT.equals(open_relation);
      case FMPackage.NODE__CHILDREN:
        return children != null && !children.isEmpty();
      case FMPackage.NODE__CLOSE_RELATION:
        return CLOSE_RELATION_EDEFAULT == null ? close_relation != null : !CLOSE_RELATION_EDEFAULT.equals(close_relation);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (open_relation: ");
    result.append(open_relation);
    result.append(", close_relation: ");
    result.append(close_relation);
    result.append(')');
    return result.toString();
  }

} //NodeImpl
