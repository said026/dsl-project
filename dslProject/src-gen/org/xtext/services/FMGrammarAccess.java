/*
 * generated by Xtext 2.12.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FMGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FeatureModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FM.FeatureModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatureModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDiagramAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDiagramFeatureDiagramParserRuleCall_1_0 = (RuleCall)cDiagramAssignment_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstraintsConstraintsParserRuleCall_2_0 = (RuleCall)cConstraintsAssignment_2.eContents().get(0);
		private final Keyword cFeatureModelKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FeatureModel:
		//	'<featureModel>' diagram=FeatureDiagram constraints=Constraints '</featureModel>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<featureModel>' diagram=FeatureDiagram constraints=Constraints '</featureModel>'
		public Group getGroup() { return cGroup; }
		
		//'<featureModel>'
		public Keyword getFeatureModelKeyword_0() { return cFeatureModelKeyword_0; }
		
		//diagram=FeatureDiagram
		public Assignment getDiagramAssignment_1() { return cDiagramAssignment_1; }
		
		//FeatureDiagram
		public RuleCall getDiagramFeatureDiagramParserRuleCall_1_0() { return cDiagramFeatureDiagramParserRuleCall_1_0; }
		
		//constraints=Constraints
		public Assignment getConstraintsAssignment_2() { return cConstraintsAssignment_2; }
		
		//Constraints
		public RuleCall getConstraintsConstraintsParserRuleCall_2_0() { return cConstraintsConstraintsParserRuleCall_2_0; }
		
		//'</featureModel>'
		public Keyword getFeatureModelKeyword_3() { return cFeatureModelKeyword_3; }
	}
	public class FeatureDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FM.FeatureDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatureDiagramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRootAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRootChildParserRuleCall_1_0 = (RuleCall)cRootAssignment_1.eContents().get(0);
		private final Keyword cFeatureDiagramKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FeatureDiagram:
		//	'<featureDiagram>' root=Child '</featureDiagram>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<featureDiagram>' root=Child '</featureDiagram>'
		public Group getGroup() { return cGroup; }
		
		//'<featureDiagram>'
		public Keyword getFeatureDiagramKeyword_0() { return cFeatureDiagramKeyword_0; }
		
		//root=Child
		public Assignment getRootAssignment_1() { return cRootAssignment_1; }
		
		//Child
		public RuleCall getRootChildParserRuleCall_1_0() { return cRootChildParserRuleCall_1_0; }
		
		//'</featureDiagram>'
		public Keyword getFeatureDiagramKeyword_2() { return cFeatureDiagramKeyword_2; }
	}
	public class ChildElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FM.Child");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLeafParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Child:
		//	Node | Leaf;
		@Override public ParserRule getRule() { return rule; }
		
		//Node | Leaf
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Node
		public RuleCall getNodeParserRuleCall_0() { return cNodeParserRuleCall_0; }
		
		//Leaf
		public RuleCall getLeafParserRuleCall_1() { return cLeafParserRuleCall_1; }
	}
	public class LeafElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FM.Leaf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMandatoryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cMandatoryMandatoryKeyword_1_0 = (Keyword)cMandatoryAssignment_1.eContents().get(0);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cQuotationMarkKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSolidusGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Leaf:
		//	'<feature' mandatory?='mandatory'? 'name=' '"' name=ID '"' '/>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<feature' mandatory?='mandatory'? 'name=' '"' name=ID '"' '/>'
		public Group getGroup() { return cGroup; }
		
		//'<feature'
		public Keyword getFeatureKeyword_0() { return cFeatureKeyword_0; }
		
		//mandatory?='mandatory'?
		public Assignment getMandatoryAssignment_1() { return cMandatoryAssignment_1; }
		
		//'mandatory'
		public Keyword getMandatoryMandatoryKeyword_1_0() { return cMandatoryMandatoryKeyword_1_0; }
		
		//'name='
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_3() { return cQuotationMarkKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_5() { return cQuotationMarkKeyword_5; }
		
		//'/>'
		public Keyword getSolidusGreaterThanSignKeyword_6() { return cSolidusGreaterThanSignKeyword_6; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FM.Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOpen_relationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpen_relationRELATIONTerminalRuleCall_1_0 = (RuleCall)cOpen_relationAssignment_1.eContents().get(0);
		private final Assignment cMandatoryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cMandatoryMandatoryKeyword_2_0 = (Keyword)cMandatoryAssignment_2.eContents().get(0);
		private final Keyword cNameKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cQuotationMarkKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cChildrenAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cChildrenChildParserRuleCall_8_0 = (RuleCall)cChildrenAssignment_8.eContents().get(0);
		private final Keyword cLessThanSignSolidusKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cClose_relationAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cClose_relationRELATIONTerminalRuleCall_10_0 = (RuleCall)cClose_relationAssignment_10.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Node:
		//	'<' open_relation=RELATION mandatory?='mandatory'? 'name=' '"' name=ID '"' '>'
		//	children+=Child+
		//	'</' close_relation=RELATION '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' open_relation=RELATION mandatory?='mandatory'? 'name=' '"' name=ID '"' '>' children+=Child+ '</'
		//close_relation=RELATION '>'
		public Group getGroup() { return cGroup; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//open_relation=RELATION
		public Assignment getOpen_relationAssignment_1() { return cOpen_relationAssignment_1; }
		
		//RELATION
		public RuleCall getOpen_relationRELATIONTerminalRuleCall_1_0() { return cOpen_relationRELATIONTerminalRuleCall_1_0; }
		
		//mandatory?='mandatory'?
		public Assignment getMandatoryAssignment_2() { return cMandatoryAssignment_2; }
		
		//'mandatory'
		public Keyword getMandatoryMandatoryKeyword_2_0() { return cMandatoryMandatoryKeyword_2_0; }
		
		//'name='
		public Keyword getNameKeyword_3() { return cNameKeyword_3; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_4() { return cQuotationMarkKeyword_4; }
		
		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_6() { return cQuotationMarkKeyword_6; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_7() { return cGreaterThanSignKeyword_7; }
		
		//children+=Child+
		public Assignment getChildrenAssignment_8() { return cChildrenAssignment_8; }
		
		//Child
		public RuleCall getChildrenChildParserRuleCall_8_0() { return cChildrenChildParserRuleCall_8_0; }
		
		//'</'
		public Keyword getLessThanSignSolidusKeyword_9() { return cLessThanSignSolidusKeyword_9; }
		
		//close_relation=RELATION
		public Assignment getClose_relationAssignment_10() { return cClose_relationAssignment_10; }
		
		//RELATION
		public RuleCall getClose_relationRELATIONTerminalRuleCall_10_0() { return cClose_relationRELATIONTerminalRuleCall_10_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_11() { return cGreaterThanSignKeyword_11; }
	}
	public class ConstraintsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FM.Constraints");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_1_0 = (RuleCall)cRulesAssignment_1.eContents().get(0);
		private final Keyword cConstraintsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Constraints:
		//	'<constraints>'
		//	rules+=Rule+
		//	'</constraints>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<constraints>' rules+=Rule+ '</constraints>'
		public Group getGroup() { return cGroup; }
		
		//'<constraints>'
		public Keyword getConstraintsKeyword_0() { return cConstraintsKeyword_0; }
		
		//rules+=Rule+
		public Assignment getRulesAssignment_1() { return cRulesAssignment_1; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_1_0() { return cRulesRuleParserRuleCall_1_0; }
		
		//'</constraints>'
		public Keyword getConstraintsKeyword_2() { return cConstraintsKeyword_2; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FM.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsFormulaParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Keyword cRuleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Rule:
		//	'<rule>'
		//	elements+=Formula+
		//	'</rule>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<rule>' elements+=Formula+ '</rule>'
		public Group getGroup() { return cGroup; }
		
		//'<rule>'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//elements+=Formula+
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//Formula
		public RuleCall getElementsFormulaParserRuleCall_1_0() { return cElementsFormulaParserRuleCall_1_0; }
		
		//'</rule>'
		public Keyword getRuleKeyword_2() { return cRuleKeyword_2; }
	}
	public class RuleElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FM.RuleElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOpen_operatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpen_operatorOPERATORTerminalRuleCall_1_0 = (RuleCall)cOpen_operatorAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLeft_sideAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLeft_sideVarParserRuleCall_3_0 = (RuleCall)cLeft_sideAssignment_3.eContents().get(0);
		private final Assignment cRight_sideAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRight_sideVarParserRuleCall_4_0 = (RuleCall)cRight_sideAssignment_4.eContents().get(0);
		private final Keyword cLessThanSignSolidusKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cClose_operatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cClose_operatorOPERATORTerminalRuleCall_6_0 = (RuleCall)cClose_operatorAssignment_6.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//RuleElement:
		//	'<' open_operator=OPERATOR '>'
		//	left_side=Var right_side=Var
		//	'</' close_operator=OPERATOR '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' open_operator=OPERATOR '>' left_side=Var right_side=Var '</' close_operator=OPERATOR '>'
		public Group getGroup() { return cGroup; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//open_operator=OPERATOR
		public Assignment getOpen_operatorAssignment_1() { return cOpen_operatorAssignment_1; }
		
		//OPERATOR
		public RuleCall getOpen_operatorOPERATORTerminalRuleCall_1_0() { return cOpen_operatorOPERATORTerminalRuleCall_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
		
		//left_side=Var
		public Assignment getLeft_sideAssignment_3() { return cLeft_sideAssignment_3; }
		
		//Var
		public RuleCall getLeft_sideVarParserRuleCall_3_0() { return cLeft_sideVarParserRuleCall_3_0; }
		
		//right_side=Var
		public Assignment getRight_sideAssignment_4() { return cRight_sideAssignment_4; }
		
		//Var
		public RuleCall getRight_sideVarParserRuleCall_4_0() { return cRight_sideVarParserRuleCall_4_0; }
		
		//'</'
		public Keyword getLessThanSignSolidusKeyword_5() { return cLessThanSignSolidusKeyword_5; }
		
		//close_operator=OPERATOR
		public Assignment getClose_operatorAssignment_6() { return cClose_operatorAssignment_6; }
		
		//OPERATOR
		public RuleCall getClose_operatorOPERATORTerminalRuleCall_6_0() { return cClose_operatorOPERATORTerminalRuleCall_6_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_7() { return cGreaterThanSignKeyword_7; }
	}
	public class FormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FM.Formula");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRuleElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Formula:
		//	Var | RuleElement;
		@Override public ParserRule getRule() { return rule; }
		
		//Var | RuleElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Var
		public RuleCall getVarParserRuleCall_0() { return cVarParserRuleCall_0; }
		
		//RuleElement
		public RuleCall getRuleElementParserRuleCall_1() { return cRuleElementParserRuleCall_1; }
	}
	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FM.Var");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNotAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNotNotKeyword_1_0 = (Keyword)cNotAssignment_1.eContents().get(0);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cQuotationMarkKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSolidusGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Var:
		//	'<var' not?='not'? 'name=' '"' name=ID '"' '/>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<var' not?='not'? 'name=' '"' name=ID '"' '/>'
		public Group getGroup() { return cGroup; }
		
		//'<var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//not?='not'?
		public Assignment getNotAssignment_1() { return cNotAssignment_1; }
		
		//'not'
		public Keyword getNotNotKeyword_1_0() { return cNotNotKeyword_1_0; }
		
		//'name='
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_3() { return cQuotationMarkKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_5() { return cQuotationMarkKeyword_5; }
		
		//'/>'
		public Keyword getSolidusGreaterThanSignKeyword_6() { return cSolidusGreaterThanSignKeyword_6; }
	}
	
	
	private final FeatureModelElements pFeatureModel;
	private final FeatureDiagramElements pFeatureDiagram;
	private final ChildElements pChild;
	private final LeafElements pLeaf;
	private final NodeElements pNode;
	private final ConstraintsElements pConstraints;
	private final RuleElements pRule;
	private final RuleElementElements pRuleElement;
	private final FormulaElements pFormula;
	private final VarElements pVar;
	private final TerminalRule tRELATION;
	private final TerminalRule tOPERATOR;
	private final TerminalRule tSTRING;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FMGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFeatureModel = new FeatureModelElements();
		this.pFeatureDiagram = new FeatureDiagramElements();
		this.pChild = new ChildElements();
		this.pLeaf = new LeafElements();
		this.pNode = new NodeElements();
		this.pConstraints = new ConstraintsElements();
		this.pRule = new RuleElements();
		this.pRuleElement = new RuleElementElements();
		this.pFormula = new FormulaElements();
		this.pVar = new VarElements();
		this.tRELATION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FM.RELATION");
		this.tOPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FM.OPERATOR");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FM.STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.FM".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//FeatureModel:
	//	'<featureModel>' diagram=FeatureDiagram constraints=Constraints '</featureModel>';
	public FeatureModelElements getFeatureModelAccess() {
		return pFeatureModel;
	}
	
	public ParserRule getFeatureModelRule() {
		return getFeatureModelAccess().getRule();
	}
	
	//FeatureDiagram:
	//	'<featureDiagram>' root=Child '</featureDiagram>';
	public FeatureDiagramElements getFeatureDiagramAccess() {
		return pFeatureDiagram;
	}
	
	public ParserRule getFeatureDiagramRule() {
		return getFeatureDiagramAccess().getRule();
	}
	
	//Child:
	//	Node | Leaf;
	public ChildElements getChildAccess() {
		return pChild;
	}
	
	public ParserRule getChildRule() {
		return getChildAccess().getRule();
	}
	
	//Leaf:
	//	'<feature' mandatory?='mandatory'? 'name=' '"' name=ID '"' '/>';
	public LeafElements getLeafAccess() {
		return pLeaf;
	}
	
	public ParserRule getLeafRule() {
		return getLeafAccess().getRule();
	}
	
	//Node:
	//	'<' open_relation=RELATION mandatory?='mandatory'? 'name=' '"' name=ID '"' '>'
	//	children+=Child+
	//	'</' close_relation=RELATION '>';
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//Constraints:
	//	'<constraints>'
	//	rules+=Rule+
	//	'</constraints>';
	public ConstraintsElements getConstraintsAccess() {
		return pConstraints;
	}
	
	public ParserRule getConstraintsRule() {
		return getConstraintsAccess().getRule();
	}
	
	//Rule:
	//	'<rule>'
	//	elements+=Formula+
	//	'</rule>';
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//RuleElement:
	//	'<' open_operator=OPERATOR '>'
	//	left_side=Var right_side=Var
	//	'</' close_operator=OPERATOR '>';
	public RuleElementElements getRuleElementAccess() {
		return pRuleElement;
	}
	
	public ParserRule getRuleElementRule() {
		return getRuleElementAccess().getRule();
	}
	
	//Formula:
	//	Var | RuleElement;
	public FormulaElements getFormulaAccess() {
		return pFormula;
	}
	
	public ParserRule getFormulaRule() {
		return getFormulaAccess().getRule();
	}
	
	//Var:
	//	'<var' not?='not'? 'name=' '"' name=ID '"' '/>';
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}
	
	//terminal RELATION:
	//	'and' | 'or' | 'alt';
	public TerminalRule getRELATIONRule() {
		return tRELATION;
	}
	
	//terminal OPERATOR:
	//	'imp';
	public TerminalRule getOPERATORRule() {
		return tOPERATOR;
	}
	
	//@ Override terminal STRING:
	//	'@@@@@@willnenverbecalled@@@@@';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
